---
apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: &app crowdsec
  namespace: security
spec:
  interval: 15m
  chart:
    spec:
      chart: *app
      version: 0.9.10
      sourceRef:
        kind: HelmRepository
        name: crowdsec
        namespace: flux-system
      interval: 15m
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    remediation:
      retries: 3
      remediateLastFailure: true
    cleanupOnFail: true
  # https://github.com/crowdsecurity/helm-charts/blob/main/charts/crowdsec/values.yaml
  values:
    config:
      profiles.yaml: |
        name: k8s_audit_notification
        filters:
        - Alert.Remediation == false && Alert.GetScenario() startsWith "crowdsecurity/k8s-audit"
        notifications:
          - discord
        on_success: break
        ---
      notifications:
        discord.yaml: |
          # Don't change this
          type: slack
          name: discord # this must match with the registered plugin in the profile
          log_level: info # Options include: trace, debug, info, warn, error, off
          format: |
            Kubernetes Security Alert:
            {{range . -}}
            {{$alert := . -}}
            {{- $resource_name := GetMeta $alert "resource_name" -}}
            {{- $resource_kind := GetMeta $alert "kind" -}}
            - Scenario: {{$alert.Scenario}}
            - Source IP: {{GetMeta $alert "source_ip"}}
            - User: {{GetMeta $alert "user"}}
            - Namespace: {{GetMeta $alert "namespace"}}
            {{- if $resource_name }}
            - Resource Name: {{GetMeta $alert "resource_name"}}
            {{- end -}}
            {{- if $resource_name }}
            - Resource Kind: {{GetMeta $alert "kind"}}
            {{- end }}
            ----
            {{end -}}
          webhook: ${CROWDSEC_WEBHOOK} # Replace this with your actual webhook URL. This is a slack plugin-specific config.
    container_runtime: containerd
    image:
      repository: ghcr.io/crowdsecurity/crowdsec
      tag: v1.5.5
    podAnnotations:
      secret.reloader.stakater.com/reload: *app
    lapi:
      env:
        - name: ENROLL_KEY
          value: ${CROWDSEC_INGRESS_API_KEY}
      dashboard:
        enabled: false
      persistentVolume:
        data:
          enabled: true
          accessModes:
            - ReadWriteOnce
          storageClassName: csi-ceph-blockpool
          size: 1Gi
        config:
          enabled: true
          accessModes:
            - ReadWriteOnce
          storageClassName: csi-ceph-blockpool
          size: 100Mi
      metrics:
        enabled: true
        serviceMonitor:
          enabled: true
      strategy:
        type: Recreate
      resources:
        limits:
          memory: 100Mi
    agent:
      env:
        - name: COLLECTIONS
          value: >-
            crowdsecurity/linux
            crowdsecurity/sshd
            crowdsecurity/nginx
            crowdsecurity/base-http-scenarios
            crowdsecurity/http-cve
            crowdsecurity/pgsql
            LePresidente/jellyseerr
            LePresidente/jellyfin
        - name: PARSERS
          value: >-
            crowdsecurity/cri-logs
      acquisition:
        - namespace: networking
          podName: ingress-nginx-controller-*
          program: nginx
        - namespace: default
          podName: jellyseerr-*
          program: jellyseerr
        - namespace: default
          podName: jellyfin-*
          program: jellyfin
      metrics:
        enabled: true
        serviceMonitor:
          enabled: true
      resources:
        limits:
          memory: 100Mi
      persistentVolume:
        config:
          enabled: false
